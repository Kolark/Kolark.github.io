{"pageProps":{"page":{"previous":"6","next":"8","letter":"7","vertex":"#define GLSLIFY 1\nvarying vec2 vUv;\nuniform float time;\n\n#define OCTAVES 5\t\t// 7\n\nfloat t()               {return (sin(0.5)+1.0)*0.5;}\nfloat function()        {return mod(t(),4.0);}\nbool  multiply_by_F1()  {return mod(t(),8.0)  >= 4.0;}\nbool  inversef()         {return mod(t(),16.0) >= 8.0;}\nfloat distance_type()\t{return mod(t()/16.0,4.0);}\n\nvec2 hash( vec2 p ){\n\tp = vec2( dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3)));\n\treturn fract(sin(p)*43758.5453);\n}\n\nfloat voronoi( in vec2 x ){\n\tvec2 n = floor( x );\n\tvec2 f = fract( x );\n\n\tfloat F1 = 8.0;\n\tfloat F2 = 8.0;\n\n\tfor( int j=-1; j<=1; j++ )\n\t\tfor( int i=-1; i<=1; i++ ){\n\t\t\tvec2 g = vec2(i,j);\n\t\t\tvec2 o = hash( n + g );\n\n\t\t\to = 0.5 + 0.41*sin(time + 6.2831*o );\n\t\t\tvec2 r = g - f + o;\n\n\t\tfloat d = \tdistance_type() < 1.0 ? dot(r,r)  :\t\t\t\t// euclidean^2\n\t\t\t\t  \tdistance_type() < 2.0 ? sqrt(dot(r,r)) :\t\t\t// euclidean\n\t\t\t\t\tdistance_type() < 3.0 ? abs(r.x) + abs(r.y) :\t\t// manhattan\n\t\t\t\t\tdistance_type() < 4.0 ? max(abs(r.x), abs(r.y)) :\t// chebyshev\n\t\t\t\t\t0.0;\n\n\t\tif( d<F1 ) {\n\t\t\tF2 = F1;\n\t\t\tF1 = d;\n\t\t} else if( d<F2 ) {\n\t\t\tF2 = d;\n\t\t}\n    }\n\n\tfloat c = function() < 1.0 ? F1 :\n\t\t\t  function() < 2.0 ? F2 :\n\t\t\t  function() < 3.0 ? F2-F1 :\n\t\t\t  function() < 4.0 ? (F1+F2)/2.0 :\n\t\t\t  0.0;\n\n\tif( multiply_by_F1() )\tc *= F1;\n\tif( inversef() )\t\t\tc = 1.0 - c;\n\n    return c;\n}\n\nfloat fbm( in vec2 p ){\n\tfloat s = 0.0;\n\tfloat m = 0.0;\n\tfloat a = 0.5;\n\n\tfor( int i=0; i<OCTAVES; i++ ){\n\t\ts += a * voronoi(p);\n\t\tm += a;\n\t\ta *= 0.5;\n\t\tp *= 2.0;\n\t}\n\treturn s/m;\n}\n\nvarying float vVar;\nvarying float vVar2;\nvoid main() {\n    vUv = uv;\n\n    vec3 newPos = position;\n    float vor = voronoi(newPos.xz*0.05);\n    // vVar = vor;\n    newPos.y += vor*25.0;\n    float x = sin(newPos.z*0.05 + time*2.25);\n    vVar2 = x;\n    newPos.x += x*10.;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPos, 1.0 );\n}","frag":"#define GLSLIFY 1\nuniform float time;\nvarying vec2 vUv;\nvarying float vVar;\nvarying float vVar2;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat sinT(float f){\n    return sin(time*f);\n}\nfloat sinTMap(float f,float min, float max){\n    return map(sin(time*f),-1.,1.,min,max);\n}\n\nfloat cosT(float f){\n    return cos(time*f);\n}\nfloat cosTMap(float f,float min, float max){\n    return map(cos(time*f),-1.,1.,min,max);\n}\n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid main() {\n    vec2 newUv = vUv;\n    float a = sinTMap(1.0,4.0,15.0);\n    float b = sinTMap(1.0,4.0,18.0);\n\n    vec3 colorA = vec3(round(sinTMap(2.25,0.0,1.0)*newUv.y*15.)/15.,round(sinTMap(2.75,0.0,1.0)*newUv.x*10.)/10.,newUv.x);\n    vec3 colorHSB = rgb2hsb(colorA);\n    colorHSB.b+= pow(((sin(time)+1.0)*0.5)+0.2,3. + vVar);\n    colorHSB.r+= 0.5;\n    vec3 colorB = hsb2rgb(colorHSB);\n// vec3(round(vVar*a)/b\n    gl_FragColor = vec4(mix(colorA,colorB,vVar*0.85 +  (round((vVar2+1.0)*0.5*10.)/10.)*0.5),1.0);\n}","model":"7_Letter.glb","positionOffset":[0,0,0],"scale":1}},"__N_SSG":true}