{"pageProps":{"page":{"previous":"h","next":"j","letter":"i","vertex":"#define GLSLIFY 1\nvarying vec2 vUv;\nuniform float time;\nvarying float vMix;\nvarying vec3 vNormal;\nvarying float vNoise;\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat sinT(float f){\n    return sin(time*f);\n}\nfloat sinTMap(float f,float min, float max){\n    return map(sin(time*f),-1.,1.,min,max);\n}\n\nfloat cosT(float f){\n    return cos(time*f);\n}\nfloat cosTMap(float f,float min, float max){\n    return map(cos(time*f),-1.,1.,min,max);\n}\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nfloat noise(float x) {\n\tfloat i = floor(x);\n\tfloat f = fract(x);\n\tfloat u = f * f * (3.0 - 2.0 * f);\n\treturn mix(hash(i), hash(i + 1.0), u);\n}\n\nvoid main() {\n    vUv = uv;\n    vNormal = normal;\n    vNoise = noise(vUv.x + time);\n    vec3 newPos = position;\n    //1 or sin..\n    float a = cosTMap(1.5,10.,75.);\n    float m = smoothstep(a-5.0,a+5.0,newPos.x);\n    vMix = m;\n    newPos.x *= mix(1.,sinTMap(2.5,1.0,2.0),m);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPos, 1.0 );\n}","frag":"#define GLSLIFY 1\nuniform float time;\nvarying vec2 vUv;\nvarying float vMix;\nvarying vec3 vNormal;\nvarying float vNoise;\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid main() {\n    vec2 newUv = vUv;\n    vec3 startColor = vec3(newUv.x,newUv.y,(sin(vNoise*5.)+1.)*0.5);\n\n    vec3 hsbStart = rgb2hsb(startColor);\n    hsbStart.r += vNormal.x;\n    hsbStart.g +=  (sin(newUv.y*vNormal.y + time)+1.0)*0.5;\n    // vec3 finalColor1 = mix(colora,,vMix*1.2);\n    // vec3 finalColor2 = mix(colora,hsb2rgb(hsbStart),vMix*0.8);\n    vec3 finalColor = hsb2rgb(hsbStart)*vMix;\n    gl_FragColor = vec4(finalColor,1.0);\n}","model":"I_Letter.glb","positionOffset":[0,0,0],"scale":1}},"__N_SSG":true}